//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Prefabs/Player/MovementInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementInput"",
    ""maps"": [
        {
            ""name"": ""Player_Move"",
            ""id"": ""28b95f50-df4b-406d-9e9f-1b0ad6f0474f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""329187c8-8b1f-4d27-9c7c-059df93127eb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""b3d2aac8-3af6-4925-baec-cbc4c43e98a0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""73ebeea8-5b46-4e67-a31f-fe3b55863508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""57c67a5b-a053-4d89-a5a8-638e6be10715"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2283ed44-c78a-4219-a3c7-e536991d7760"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4d235b96-2448-4cf5-9c2d-b9f39d83d4a0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD Keys"",
                    ""id"": ""ba53d7c3-2f17-4dbb-8042-cf772c57b5be"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0c3c9571-7ee6-462c-98de-66b2e15c7f93"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8941995c-cfc3-4831-ae3c-59f80d91343f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e0436726-4bbd-4659-a777-15ffa9b721e8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ship_Move"",
            ""id"": ""1059cfe7-b321-4da2-89b4-ad34396009a6"",
            ""actions"": [
                {
                    ""name"": ""Movement "",
                    ""type"": ""Value"",
                    ""id"": ""b26c521d-1dd3-414d-8134-3bae9f6376dd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""6836f3f8-4d99-45f3-9e02-b016de927750"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Vertical"",
                    ""id"": ""3cea481c-696a-4646-b3d2-54128be7a19d"",
                    ""path"": ""1DAxis(minValue=-0.5)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement "",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""2ce7a75e-9825-4fd2-a4b6-86574b44b131"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""de56824b-90cb-457b-91aa-e56efe73c4f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""d28b327b-4e17-4b55-bfeb-989ba3f23a13"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""432fdaad-6dd5-44d9-92cf-4bd9a07c4cee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""375f1c9a-e868-4053-aad0-80e568870b24"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""54b1c63d-45c7-4acf-93e2-5c371f7d2d7d"",
            ""actions"": [
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""93ed4341-4d13-440b-96e6-94daa5572f78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""c1c744bf-1fe0-4d00-a445-0ba8fc11e6dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Height"",
                    ""type"": ""Value"",
                    ""id"": ""4b1dd661-8918-4182-bdeb-9833fb944873"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d9ef490-50d1-4282-90ef-59140edad5f5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d280477f-72ac-483a-8560-8b622ffd6403"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""UI Keys"",
                    ""id"": ""bee095ff-66d4-4fe4-a067-41a28436e80c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Height"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""1c8cb75a-31c1-4972-a29a-988e4f6767f8"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Height"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""877c6b33-7ac2-40ea-8a17-06d388335ba3"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Height"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Move
        m_Player_Move = asset.FindActionMap("Player_Move", throwIfNotFound: true);
        m_Player_Move_Movement = m_Player_Move.FindAction("Movement", throwIfNotFound: true);
        m_Player_Move_Rotate = m_Player_Move.FindAction("Rotate", throwIfNotFound: true);
        m_Player_Move_Jump = m_Player_Move.FindAction("Jump", throwIfNotFound: true);
        // Ship_Move
        m_Ship_Move = asset.FindActionMap("Ship_Move", throwIfNotFound: true);
        m_Ship_Move_Movement = m_Ship_Move.FindAction("Movement ", throwIfNotFound: true);
        m_Ship_Move_Rotation = m_Ship_Move.FindAction("Rotation", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Use = m_Interaction.FindAction("Use", throwIfNotFound: true);
        m_Interaction_Drop = m_Interaction.FindAction("Drop", throwIfNotFound: true);
        m_Interaction_Height = m_Interaction.FindAction("Height", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Move
    private readonly InputActionMap m_Player_Move;
    private IPlayer_MoveActions m_Player_MoveActionsCallbackInterface;
    private readonly InputAction m_Player_Move_Movement;
    private readonly InputAction m_Player_Move_Rotate;
    private readonly InputAction m_Player_Move_Jump;
    public struct Player_MoveActions
    {
        private @MovementInput m_Wrapper;
        public Player_MoveActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Move_Movement;
        public InputAction @Rotate => m_Wrapper.m_Player_Move_Rotate;
        public InputAction @Jump => m_Wrapper.m_Player_Move_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MoveActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_MoveActions instance)
        {
            if (m_Wrapper.m_Player_MoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnMovement;
                @Rotate.started -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnRotate;
                @Jump.started -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_Player_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public Player_MoveActions @Player_Move => new Player_MoveActions(this);

    // Ship_Move
    private readonly InputActionMap m_Ship_Move;
    private IShip_MoveActions m_Ship_MoveActionsCallbackInterface;
    private readonly InputAction m_Ship_Move_Movement;
    private readonly InputAction m_Ship_Move_Rotation;
    public struct Ship_MoveActions
    {
        private @MovementInput m_Wrapper;
        public Ship_MoveActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Ship_Move_Movement;
        public InputAction @Rotation => m_Wrapper.m_Ship_Move_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Ship_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Ship_MoveActions set) { return set.Get(); }
        public void SetCallbacks(IShip_MoveActions instance)
        {
            if (m_Wrapper.m_Ship_MoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Ship_MoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Ship_MoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Ship_MoveActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_Ship_MoveActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_Ship_MoveActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_Ship_MoveActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_Ship_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public Ship_MoveActions @Ship_Move => new Ship_MoveActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Use;
    private readonly InputAction m_Interaction_Drop;
    private readonly InputAction m_Interaction_Height;
    public struct InteractionActions
    {
        private @MovementInput m_Wrapper;
        public InteractionActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Use => m_Wrapper.m_Interaction_Use;
        public InputAction @Drop => m_Wrapper.m_Interaction_Drop;
        public InputAction @Height => m_Wrapper.m_Interaction_Height;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Use.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnUse;
                @Drop.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrop;
                @Height.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnHeight;
                @Height.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnHeight;
                @Height.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnHeight;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Height.started += instance.OnHeight;
                @Height.performed += instance.OnHeight;
                @Height.canceled += instance.OnHeight;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);
    public interface IPlayer_MoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IShip_MoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnUse(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnHeight(InputAction.CallbackContext context);
    }
}
