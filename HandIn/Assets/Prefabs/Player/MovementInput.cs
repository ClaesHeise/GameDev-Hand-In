//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Prefabs/Player/MovementInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementInput"",
    ""maps"": [
        {
            ""name"": ""Player_Move"",
            ""id"": ""28b95f50-df4b-406d-9e9f-1b0ad6f0474f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""329187c8-8b1f-4d27-9c7c-059df93127eb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""b3d2aac8-3af6-4925-baec-cbc4c43e98a0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""57c67a5b-a053-4d89-a5a8-638e6be10715"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2283ed44-c78a-4219-a3c7-e536991d7760"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4d235b96-2448-4cf5-9c2d-b9f39d83d4a0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD Keys"",
                    ""id"": ""ba53d7c3-2f17-4dbb-8042-cf772c57b5be"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0c3c9571-7ee6-462c-98de-66b2e15c7f93"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8941995c-cfc3-4831-ae3c-59f80d91343f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Move
        m_Player_Move = asset.FindActionMap("Player_Move", throwIfNotFound: true);
        m_Player_Move_Movement = m_Player_Move.FindAction("Movement", throwIfNotFound: true);
        m_Player_Move_Rotate = m_Player_Move.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Move
    private readonly InputActionMap m_Player_Move;
    private IPlayer_MoveActions m_Player_MoveActionsCallbackInterface;
    private readonly InputAction m_Player_Move_Movement;
    private readonly InputAction m_Player_Move_Rotate;
    public struct Player_MoveActions
    {
        private @MovementInput m_Wrapper;
        public Player_MoveActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Move_Movement;
        public InputAction @Rotate => m_Wrapper.m_Player_Move_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Player_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MoveActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_MoveActions instance)
        {
            if (m_Wrapper.m_Player_MoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnMovement;
                @Rotate.started -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_Player_MoveActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_Player_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public Player_MoveActions @Player_Move => new Player_MoveActions(this);
    public interface IPlayer_MoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
